# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # # Load the panelr package to use specialized functions for panel data
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
data_health <- as.data.frame(read_excel("data\health_expenditure.xlsx"))
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
View(health_expenditure_pc)
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
View(gdp_pc)
View(health_expenditure_pc)
long_panel_health <- long_panel(health_expenditure_pc, prefix = ".", wave="year",  periods=2014:2023,
id = "countries", label_location = "end")
View(health_expenditure_pc)
panel_health_expenditure <- reshape(health_expenditure_pc,
idvar= "country",
varying = list(2:11),
timevar= "year",
times = seq(from = 2012, to = 2022),
new.row.names= 1:10000,
direction = "long"
)
panel_health_expenditure <- reshape(health_expenditure_pc,
idvar= "country",
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
View(panel_health_expenditure)
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
View(health_expenditure_pc)
View(panel_health_expenditure)
View(gdp_pc)
View(gdp_pc)
panel_gdp_pc <- reshape(gdp_pc,
varying = list(2:25),
timevar= "year",
times = seq(from = 2000, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
View(panel_health_expenditure)
View(panel_health_expenditure)
View(panel_health_expenditure)
names(panel_health_expenditure)[3] <- "health_expenditure_pc"
View(panel_health_expenditure)
# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # # Load the panelr package to use specialized functions for panel data
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
# --- Section 3: Data Loading ---
# Load the data from the specified Excel file located within a 'data' subfolder.
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
names(panel_health_expenditure)[3] <- "health_expenditure_pc"
panel_gdp_pc <- reshape(gdp_pc,
varying = list(2:25),
timevar= "year",
times = seq(from = 2000, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
names(panel_gdp_pc)[2] <- "gdp_pc"
bd_final<-merge(panel_health_expenditure, panel_gdp_pc, by =c ("country", "year"), all=TRUE)
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
View(panel_gdp_pc)
View(panel_health_expenditure)
# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # # Load the panelr package to use specialized functions for panel data
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
# --- Section 3: Data Loading ---
# Load the data from the specified Excel file located within a 'data' subfolder.
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
names(panel_health_expenditure)[3] <- "health_expenditure_pc"
panel_gdp_pc <- reshape(gdp_pc,
varying = list(2:25),
timevar= "year",
times = seq(from = 2000, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
names(panel_gdp_pc)[3] <- "gdp_pc"
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
View(bd_final)
write_xlsx(bd_final, "bd_final.xlsx")
library(writexl) # library in R is a package used to write data frames to Excel files.
write_xlsx(bd_final, "bd_final.xlsx")
View(panel_health_expenditure)
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all.x = TRUE)
View(bd_final)
write_xlsx(bd_final, "bd_final.xlsx")
# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # Load the panelr package to use specialized functions for panel data
library(writexl) # library in R is a package used to write data frames to Excel files.
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
# --- Section 3: Data Loading ---
# Load the data from the specified Excel file located within a 'data' subfolder.
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
# --- Section 4: Reshaping Data ---
# Reshape the health expenditure data to a long format, specifying columns 2 to 11 as variables that vary over time.
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),   # Columns containing data over the years.
timevar = "year",       # Name of the column that will be created to represent years.
times = seq(from = 2014, to 2023), # Sequence of years represented in the columns.
# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # Load the panelr package to use specialized functions for panel data
library(writexl) # library in R is a package used to write data frames to Excel files.
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
# --- Section 3: Data Loading ---
# Load the data from the specified Excel file located within a 'data' subfolder.
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
# --- Section 4: Reshaping Data ---
# Reshape the health expenditure data to a long format, specifying columns 2 to 11 as variables that vary over time.
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),   # Columns containing data over the years.
timevar = "year",       # Name of the column that will be created to represent years.
times = seq(from = 2014, to 2023), # Sequence of years represented in the columns.
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),   # Columns containing data over the years.
timevar = "year",       # Name of the column that will be created to represent years.
times = seq(from = 2014, to 2023), # Sequence of years represented in the columns.
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
panel_health_expenditure <- reshape(health_expenditure_pc,
varying = list(2:11),   # Columns containing data over the years.
timevar = "year",       # Name of the column that will be created to represent years.
times = seq(from = 2014, to 2023), # Sequence of years represented in the columns.
panel_gdp_pc <- reshape(gdp_pc,
varying = list(2:25),  # Columns containing data over the years.
timevar = "year",
times = seq(from 2000, to 2023),
panel_gdp_pc <- reshape(gdp_pc,
varying = list(2:25),
timevar = "year",
times = seq(from = 2000, to = 2023),
new.row.names = 1:10000,
direction = "long"
)
names(panel_gdp_pc)[3] <- "gdp_pc"
# --- Section 5: Merging Data ---
# Merge the two dataframes, 'panel_health_expenditure' and 'panel_gdp_pc',
# based on the columns 'country' and 'year'. The 'all = TRUE' indicates a 'full join',
# meaning it includes all rows from both dataframes, filling with NA where there is no match.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
# Additional comments on merge parameters not used in this example:
# all.x = TRUE would function as a left join; all.y = TRUE would function as a right join.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all.x = TRUE)
# --- Section 6: Exporting Data to Exce ---
write_xlsx(bd_final, "bd_final.xlsx")
# Rename the third column of the resulting dataframe to 'gdp_pc'.
names(panel_gdp_pc)[3] <- "gdp_pc"
# --- Section 5: Merging Data ---
# Merge the two dataframes, 'panel_health_expenditure' and 'panel_gdp_pc',
# based on the columns 'country' and 'year'. The 'all = TRUE' indicates a 'full join',
# meaning it includes all rows from both dataframes, filling with NA where there is no match.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
# Additional comments on merge parameters not used in this example:
# all.x = TRUE would function as a left join; all.y = TRUE would function as a right join.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all.x = TRUE)
View(bd_final)
View(panel_gdp_pc)
View(panel_health_expenditure)
# Reshape the GDP per capita data to a long format, similarly to the health data reshaping above.
panel_gdp_pc <- reshape(gdp_pc,
idvar="country",
varying = list(2:25),
timevar = "year",
times = seq(from = 2000, to = 2023),
new.row.names = 1:10000,
direction = "long"
)
View(panel_gdp_pc)
panel_health_expenditure <- reshape(health_expenditure_pc,
idvar="country",
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
View(panel_gdp_pc)
panel_health_expenditure <- reshape(health_expenditure_pc,
idvar="country",
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
# Rename the third column of the resulting dataframe to 'health_expenditure_pc'.
names(panel_health_expenditure)[3] <- "health_expenditure_pc"
# Reshape the GDP per capita data to a long format, similarly to the health data reshaping above.
panel_gdp_pc <- reshape(gdp_pc,
idvar="country",
varying = list(2:25),
timevar = "year",
times = seq(from = 2000, to = 2023),
new.row.names = 1:10000,
direction = "long"
)
# Rename the third column of the resulting dataframe to 'gdp_pc'.
names(panel_gdp_pc)[3] <- "gdp_pc"
# --- Section 5: Merging Data ---
# Merge the two dataframes, 'panel_health_expenditure' and 'panel_gdp_pc',
# based on the columns 'country' and 'year'. The 'all = TRUE' indicates a 'full join',
# meaning it includes all rows from both dataframes, filling with NA where there is no match.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
# Additional comments on merge parameters not used in this example:
# all.x = TRUE would function as a left join; all.y = TRUE would function as a right join.
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all.x = TRUE)
# --- Section 6: Exporting Data to Exce ---
write_xlsx(bd_final, "bd_final.xlsx")
# --- Section 1: Loading Libraries ---
# Load necessary R libraries required for the analysis
library(here)   # Simplifies the way to specify file paths that work well across different operating systems.
library(readxl) # Used for reading Excel files.
library(dplyr)  # A powerful data manipulation library in R, part of the 'tidyverse'.
# Provides functions to efficiently perform common data operations such as:
# - filter(): for subsetting rows based on logical conditions.
# - select(): for selecting specific columns.
# - arrange(): for sorting data.
# - mutate(): for creating new columns from existing ones.
# - summarise(): for generating statistical summaries.
# - group_by(): for grouping data to perform group-wise analyses.
library(car)    # Includes tools for regression diagnostics, hypothesis testing of regression coefficients, and other advanced analyses.
library(stargazer) # # The 'stargazer' package is used for creating well-formatted tables of statistical model outputs.
library(ggplot2)  # for creating plots
library(panelr) # Load the panelr package to use specialized functions for panel data
library(writexl) # library in R is a package used to write data frames to Excel files.
# --- Section 2: Setting and Displaying Current Working Directory ---
# Set and print the current working directory to ensure file paths are correctly set.
current_directory <- getwd()
print(current_directory)
health_expenditure_pc <- as.data.frame(read_excel("data/health_expenditure_pc.xlsx",
na = ":"))
View(health_expenditure_pc)
gdp_pc <- as.data.frame(read_excel("data/gdp_pc.xlsx",
na = ":"))
View(gdp_pc)
View(health_expenditure_pc)
panel_health_expenditure <- reshape(health_expenditure_pc,
idvar="country",
varying = list(2:11),
timevar= "year",
times = seq(from = 2014, to = 2023),
new.row.names= 1:10000,
direction = "long"
)
View(panel_health_expenditure)
names(panel_health_expenditure)[3] <- "health_expenditure_pc"
View(panel_health_expenditure)
panel_gdp_pc <- reshape(gdp_pc,
idvar="country",
varying = list(2:25),
timevar = "year",
times = seq(from = 2000, to = 2023),
new.row.names = 1:10000,
direction = "long"
)
# Rename the third column of the resulting dataframe to 'gdp_pc'.
names(panel_gdp_pc)[3] <- "gdp_pc"
View(panel_gdp_pc)
current_directory <- getwd()
print(current_directory)
View(panel_gdp_pc)
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all = TRUE)
View(bd_final)
bd_final <- merge(panel_health_expenditure, panel_gdp_pc, by = c("country", "year"), all.x = TRUE)
View(bd_final)
write_xlsx(bd_final, "bd_final.xlsx")
install.packages(here)
install.packages("here")
install.packages(here)
install.packages("here")
